{"ast":null,"code":"import React,{useEffect,useState}from'react';import PostList from\"../components/PostList\";import PostForm from'../components/PostForm';import PostFilter from'../components/PostFilter';import MyModal from'../components/UI/modal/MyModal';import MyButton from'../components/UI/button/MyButton';import{usePosts}from'../hook/usePost';import PostService from'../API/PostService';import Loader from'../components/UI/loader/Loader';import{useFetching}from'../hook/useFetching';import{getPageCount,getPagesArray}from'../utils/pages';import Pagination from'../components/UI/pagination/Pagination';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Posts=()=>{const[posts,setPosts]=useState([]);const[filter,setFilter]=useState({sort:'',query:''});const[modal,setModal]=useState(false);const[totalPages,setTotalPages]=useState(0);//Общее кол-во постов с запроса в header(x-total-count)\nconst[limit,setLimit]=useState(10);//Кол-во постов на странице\nconst[page,setPage]=useState(1);//номер текущей страницы\nconst sortedAndSearchedPosts=usePosts(posts,filter.sort,filter.query);const[fetchPosts,isPostsLoading,postError]=useFetching(async()=>{const responce=await PostService.getAll(limit,page);setPosts(responce.data);const totalCount=responce.headers['x-total-count'];//кол-во постов \nsetTotalPages(getPageCount(totalCount,limit));});const changePage=page=>{setPage(page);};//хук для управления жизненным циклом компонента (получение данных при первичной отрисовке)\nuseEffect(()=>{fetchPosts();},[page]);//добавить новый пост\nconst createNewPost=newPost=>{setPosts([...posts,newPost]);setModal(false);};//удалить пост\nconst removePost=post=>{setPosts(posts.filter(p=>p.id!==post.id));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(MyModal,{visible:modal,setVisible:setModal,children:/*#__PURE__*/_jsx(PostForm,{create:createNewPost})}),/*#__PURE__*/_jsx(PostFilter,{filter:filter,setFilter:setFilter}),/*#__PURE__*/_jsx(MyButton,{style:{marginTop:15,marginBottom:20,padding:\"6px 25px\"},onClick:()=>setModal(true),children:\"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043F\\u043E\\u0441\\u0442\"}),postError&&/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',marginTop:30},children:/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 $\",postError]})}),isPostsLoading?/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center',marginTop:30},children:/*#__PURE__*/_jsx(Loader,{})}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(PostList,{remove:removePost,posts:sortedAndSearchedPosts,title:'Список постов'}),/*#__PURE__*/_jsx(Pagination,{totalPages:totalPages,changePage:changePage,page:page})]})]});};export default Posts;","map":{"version":3,"names":["React","useEffect","useState","PostList","PostForm","PostFilter","MyModal","MyButton","usePosts","PostService","Loader","useFetching","getPageCount","getPagesArray","Pagination","jsx","_jsx","jsxs","_jsxs","Posts","posts","setPosts","filter","setFilter","sort","query","modal","setModal","totalPages","setTotalPages","limit","setLimit","page","setPage","sortedAndSearchedPosts","fetchPosts","isPostsLoading","postError","responce","getAll","data","totalCount","headers","changePage","createNewPost","newPost","removePost","post","p","id","children","visible","setVisible","create","style","marginTop","marginBottom","padding","onClick","display","justifyContent","remove","title"],"sources":["/Users/falkinroman/Desktop/my-app/reactPosts/src/Pages/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PostList from \"../components/PostList\";\nimport PostForm from '../components/PostForm';\nimport PostFilter from '../components/PostFilter';\nimport MyModal from '../components/UI/modal/MyModal';\nimport MyButton from '../components/UI/button/MyButton';\nimport { usePosts } from '../hook/usePost';\nimport PostService from '../API/PostService';\nimport Loader from '../components/UI/loader/Loader';\nimport { useFetching } from '../hook/useFetching';\nimport { getPageCount, getPagesArray } from '../utils/pages'\nimport Pagination from '../components/UI/pagination/Pagination';\n\n\nconst Posts = () => {\n\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({ sort: '', query: '' })\n  const [modal, setModal] = useState(false)\n  const [totalPages, setTotalPages] = useState(0) //Общее кол-во постов с запроса в header(x-total-count)\n  const [limit, setLimit] = useState(10) //Кол-во постов на странице\n  const [page, setPage] = useState(1) //номер текущей страницы\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query)\n  const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\n    const responce = await PostService.getAll(limit, page);\n    setPosts(responce.data)\n    const totalCount = responce.headers['x-total-count'];  //кол-во постов \n    setTotalPages(getPageCount(totalCount, limit))\n  })\n\n\n  const changePage = (page) => {\n    setPage(page) \n  }\n\n\n\n\n\n\n\n\n  //хук для управления жизненным циклом компонента (получение данных при первичной отрисовке)\n  useEffect(() => {\n    fetchPosts()\n  }, [page])\n\n\n\n  //добавить новый пост\n  const createNewPost = (newPost) => {\n    setPosts([...posts, newPost])\n    setModal(false)\n  }\n\n\n  //удалить пост\n  const removePost = (post) => {\n    setPosts(posts.filter(p => p.id !== post.id))\n  }\n\n\n  return (\n    <div>\n      <MyModal visible={modal} setVisible={setModal} >\n        <PostForm create={createNewPost} />\n      </MyModal>\n\n\n      <PostFilter filter={filter} setFilter={setFilter} />\n\n      <MyButton style={{ marginTop: 15, marginBottom: 20, padding: \"6px 25px\"  }} onClick={() => setModal(true)}>\n        Создать пост\n      </MyButton>\n      {postError &&\n        <div style={{ display: 'flex', justifyContent: 'center', marginTop: 30 }}><h2>Произошла ошибка ${postError}</h2></div>\n      }\n      {isPostsLoading\n        ? <div style={{ display: 'flex', justifyContent: 'center', marginTop: 30 }}><Loader /></div>\n        : <div>\n            <PostList remove={removePost} posts={sortedAndSearchedPosts} title={'Список постов'} />\n            <Pagination totalPages={totalPages} changePage={changePage} page={page}/>\n          </div>\n      }\n      \n    </div>\n  );\n};\n\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}