{"ast":null,"code":"var _jsxFileName = \"/Users/falkinroman/Desktop/my-app/src/Pages/Posts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PostList from \"../components/PostList\";\nimport PostForm from '../components/PostForm';\nimport PostFilter from '../components/PostFilter';\nimport MyModal from '../components/UI/modal/MyModal';\nimport MyButton from '../components/UI/button/MyButton';\nimport { usePosts } from '../hook/usePost';\nimport PostService from '../API/PostService';\nimport Loader from '../components/UI/loader/Loader';\nimport { useFetching } from '../hook/useFetching';\nimport { getPageCount } from '../utils/pages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [filter, setFilter] = useState({\n    sort: '',\n    query: ''\n  });\n  const [modal, setModal] = useState(false);\n  const [totalPages, setTotalPages] = useState(0); //Общее кол-во постов с запроса в header(x-total-count)\n  const [limit, setLimit] = useState(10); //Кол-во постов на странице\n  const [page, setPage] = useState(1); //номер текущей страницы\n  const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query);\n  const [fetchPosts, isPostsLoading, postError] = useFetching(async () => {\n    const responce = await PostService.getAll(limit, page);\n    setPosts(responce.data);\n    const totalCount = responce.headers['x-total-count']; //кол-во постов \n    setTotalPages(getPageCount(totalCount, limit));\n  });\n  let pagesArray = [];\n  for (let i = 0; i < totalPages; i++) {\n    pagesArray.push(i + 1);\n  }\n  console.log(pagesArray);\n\n  //хук для управления жизненным циклом компонента (получение данных при первичной отрисовке)\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  //добавить новый пост\n  const createNewPost = newPost => {\n    setPosts([...posts, newPost]);\n    setModal(false);\n  };\n\n  //удалить пост\n  const removePost = post => {\n    setPosts(posts.filter(p => p.id !== post.id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MyModal, {\n      visible: modal,\n      setVisible: setModal,\n      children: /*#__PURE__*/_jsxDEV(PostForm, {\n        create: createNewPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PostFilter, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n      style: {\n        marginTop: 15\n      },\n      onClick: () => setModal(true),\n      children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043F\\u043E\\u0441\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), postError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 $\", postError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 90\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this), isPostsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 90\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(PostList, {\n      remove: removePost,\n      posts: sortedAndSearchedPosts,\n      title: 'Список постов'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(Posts, \"hzAWEOYJXK0cgZseZpXavQCcn+A=\", false, function () {\n  return [usePosts, useFetching];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","PostList","PostForm","PostFilter","MyModal","MyButton","usePosts","PostService","Loader","useFetching","getPageCount","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","filter","setFilter","sort","query","modal","setModal","totalPages","setTotalPages","limit","setLimit","page","setPage","sortedAndSearchedPosts","fetchPosts","isPostsLoading","postError","responce","getAll","data","totalCount","headers","pagesArray","i","push","console","log","createNewPost","newPost","removePost","post","p","id","children","visible","setVisible","create","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","display","justifyContent","remove","title","_c","$RefreshReg$"],"sources":["/Users/falkinroman/Desktop/my-app/src/Pages/Posts.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PostList from \"../components/PostList\";\nimport PostForm from '../components/PostForm';\nimport PostFilter from '../components/PostFilter';\nimport MyModal from '../components/UI/modal/MyModal';\nimport MyButton from '../components/UI/button/MyButton';\nimport { usePosts } from '../hook/usePost';\nimport PostService from '../API/PostService';\nimport Loader from '../components/UI/loader/Loader';\nimport { useFetching } from '../hook/useFetching';\nimport { getPageCount } from '../utils/pages'\n\n\nconst Posts = () => {\n\n    const [posts, setPosts] = useState([]);\n    const [filter, setFilter] = useState({sort: '', query: '' })\n    const [modal, setModal] = useState(false)\n    const [totalPages, setTotalPages] = useState(0) //Общее кол-во постов с запроса в header(x-total-count)\n    const [limit, setLimit] = useState(10) //Кол-во постов на странице\n    const [page, setPage] = useState(1) //номер текущей страницы\n    const sortedAndSearchedPosts = usePosts(posts, filter.sort, filter.query)\n    const[fetchPosts, isPostsLoading, postError]= useFetching(async() => {\n      const responce = await PostService.getAll(limit, page);\n      setPosts(responce.data)\n      const totalCount = responce.headers['x-total-count'];  //кол-во постов \n      setTotalPages(getPageCount(totalCount, limit))\n    })\n\n    let pagesArray = []\n    for( let i=0 ; i < totalPages; i++) {\n      pagesArray.push(i + 1)\n    }\n\n    console.log(pagesArray);\n\n\n  \n    //хук для управления жизненным циклом компонента (получение данных при первичной отрисовке)\n    useEffect(() => {\n      fetchPosts()\n    }, [])\n  \n  \n  \n    //добавить новый пост\n    const createNewPost = (newPost) => {\n      setPosts([...posts, newPost])\n      setModal(false)\n    }\n  \n  \n    //удалить пост\n    const removePost = (post) => {\n      setPosts(posts.filter(p=> p.id !== post.id))\n    }\n  \n  \n    return (\n        <div>\n            <MyModal visible={modal} setVisible={setModal} >\n              <PostForm create={createNewPost}/>\n            </MyModal>\n            \n\n            <PostFilter filter={filter}  setFilter={setFilter}/>\n\n            <MyButton style={{marginTop: 15}} onClick={() => setModal(true)}>\n              Создать пост\n            </MyButton>\n              { postError &&\n                  <div style={{display: 'flex', justifyContent: 'center', marginTop:30}}><h2>Произошла ошибка ${postError}</h2></div>\n              }\n              { isPostsLoading \n                ? <div style={{display: 'flex', justifyContent: 'center', marginTop:30}}><Loader/></div>\n                : <PostList remove={removePost}  posts={sortedAndSearchedPosts} title={'Список постов'}/>\n              }\n              \n         </div>\n    );\n};\n\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}