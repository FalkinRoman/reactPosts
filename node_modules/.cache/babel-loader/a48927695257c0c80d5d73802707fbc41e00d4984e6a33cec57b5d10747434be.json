{"ast":null,"code":"var _jsxFileName = \"/Users/falkinroman/Desktop/my-app/reactPosts/src/components/FormContact.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MyInput from './UI/input/MyInput';\nimport MyTextarea from './UI/textarea/MyTextarea';\nimport MyButton from './UI/button/MyButton';\nimport { FormService } from '../API/FormService';\nimport { useFetching } from '../hook/useFetching';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContact = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [nameDirty, setNameDirty] = useState(false);\n  const [nameError, setNameError] = useState('Имя не может быть пустым');\n  const [email, setEmail] = useState('');\n  const [emailDirty, setEmailDirty] = useState(false);\n  const [emailError, setEmailError] = useState('email не может быть пустым');\n  const [comment, setComment] = useState('');\n  const [validForm, setValidForm] = useState(false);\n  const [fetchForm, FormLoading, formError] = useFetching(async () => {\n    const formData = {\n      name,\n      email,\n      comment\n    };\n    await FormService.sendFormToTelegram(formData);\n  });\n  useEffect(() => {\n    if (nameError || emailError) {\n      setValidForm(false);\n    } else {\n      setValidForm(true);\n    }\n  }, [nameError, emailError]);\n\n  // Валидация для имени\n  const nameHandler = e => {\n    setName(e.target.value);\n    if (e.target.value.length < 3 || e.target.value.length > 20) {\n      setNameError('Поле имя должно быть длинее 3 и меньше 20');\n      if (!e.target.value) {\n        setNameError('Имя не может быть пустым');\n      }\n    } else {\n      setNameError('');\n    }\n  };\n\n  // Валидация для email\n  const emailHandler = e => {\n    setEmail(e.target.value);\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!re.test(String(e.target.value).toLowerCase())) {\n      setEmailError('Некорректный email');\n    } else {\n      setEmailError('');\n    }\n  };\n\n  // При смене фокуса с поля инпут\n  const blurHandler = e => {\n    switch (e.target.name) {\n      case 'name':\n        setNameDirty(true);\n        break;\n      case 'email':\n        setEmailDirty(true);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form_contact\",\n    children: [nameDirty && nameError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: nameError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n      onChange: e => nameHandler(e),\n      onBlur: e => blurHandler(e),\n      value: name,\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"\\u0418\\u043C\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), emailDirty && emailError && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: emailError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(MyInput, {\n      onChange: e => emailHandler(e),\n      onBlur: e => blurHandler(e),\n      value: email,\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyTextarea, {\n      value: comment,\n      onChange: e => setComment(e.target.value),\n      name: \"comment\",\n      type: \"text\",\n      placeholder: \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex_end\",\n      children: /*#__PURE__*/_jsxDEV(MyButton, {\n        onClick: fetchForm,\n        disabled: !validForm,\n        type: \"submit\",\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(FormContact, \"hp7EaQ7PcZyOmsfRSZZ0fmPwtxI=\", false, function () {\n  return [useFetching];\n});\n_c = FormContact;\nexport default FormContact;\nvar _c;\n$RefreshReg$(_c, \"FormContact\");","map":{"version":3,"names":["React","useEffect","useState","MyInput","MyTextarea","MyButton","FormService","useFetching","jsxDEV","_jsxDEV","FormContact","_s","name","setName","nameDirty","setNameDirty","nameError","setNameError","email","setEmail","emailDirty","setEmailDirty","emailError","setEmailError","comment","setComment","validForm","setValidForm","fetchForm","FormLoading","formError","formData","sendFormToTelegram","nameHandler","e","target","value","length","emailHandler","re","test","String","toLowerCase","blurHandler","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onBlur","type","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/falkinroman/Desktop/my-app/reactPosts/src/components/FormContact.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MyInput from './UI/input/MyInput';\nimport MyTextarea from './UI/textarea/MyTextarea';\nimport MyButton from './UI/button/MyButton';\nimport { FormService } from '../API/FormService';\nimport { useFetching } from '../hook/useFetching';\n\nconst FormContact = () => {\n  const [name, setName] = useState('');\n  const [nameDirty, setNameDirty] = useState(false);\n  const [nameError, setNameError] = useState('Имя не может быть пустым');\n  const [email, setEmail] = useState('');\n  const [emailDirty, setEmailDirty] = useState(false);\n  const [emailError, setEmailError] = useState('email не может быть пустым');\n  const [comment, setComment] = useState('');\n  const [validForm, setValidForm] = useState(false);\n\n  const [fetchForm, FormLoading, formError] = useFetching(async () => {\n    const formData = {\n      name,\n      email,\n      comment,\n    };\n    await FormService.sendFormToTelegram(formData);\n  });\n\n\n\n  useEffect(() => {\n    if (nameError || emailError) {\n      setValidForm(false);\n    } else {\n      setValidForm(true);\n    }\n  }, [nameError, emailError]);\n\n\n\n  // Валидация для имени\n  const nameHandler = (e) => {\n    setName(e.target.value);\n    if (e.target.value.length < 3 || e.target.value.length > 20) {\n      setNameError('Поле имя должно быть длинее 3 и меньше 20');\n      if (!e.target.value) {\n        setNameError('Имя не может быть пустым');\n      }\n    } else {\n      setNameError('');\n    }\n  };\n\n\n\n  // Валидация для email\n  const emailHandler = (e) => {\n    setEmail(e.target.value);\n    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!re.test(String(e.target.value).toLowerCase())) {\n      setEmailError('Некорректный email');\n    } else {\n      setEmailError('');\n    }\n  };\n\n\n\n  // При смене фокуса с поля инпут\n  const blurHandler = (e) => {\n    switch (e.target.name) {\n      case 'name':\n        setNameDirty(true);\n        break;\n\n      case 'email':\n        setEmailDirty(true);\n        break;\n    }\n  };\n\n\n  \n  return (\n    <form className='form_contact'>\n      {(nameDirty && nameError) && <div style={{ color: 'red' }}>{nameError}</div>}\n      <MyInput onChange={(e) => nameHandler(e)} onBlur={(e) => blurHandler(e)} value={name} name='name' type='text' placeholder='Имя' />\n      {(emailDirty && emailError) && <div style={{ color: 'red' }}>{emailError}</div>}\n      <MyInput onChange={(e) => emailHandler(e)} onBlur={(e) => blurHandler(e)} value={email} name='email' type='email' placeholder='Email' />\n      <MyTextarea value={comment} onChange={(e) => setComment(e.target.value)} name='comment' type='text' placeholder='Комментарий' />\n      <div className='flex flex_end'>\n        <MyButton onClick={fetchForm} disabled={!validForm} type='submit'>\n          Отправить\n        </MyButton>\n      </div>\n    </form>\n  );\n};\n\nexport default FormContact;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}