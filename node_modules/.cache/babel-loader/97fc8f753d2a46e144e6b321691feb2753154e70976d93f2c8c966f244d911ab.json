{"ast":null,"code":"var _jsxFileName = \"/Users/falkinroman/Desktop/my-app/src/Pages/PostIdPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetching } from '../hook/useFetching';\nimport PostService from '../API/PostService';\nimport Loader from '../components/UI/loader/Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostIdPage = () => {\n  _s();\n  const params = useParams(); //хук позволяет закрать с url параметр (номер поста)\n  const [post, setPost] = useState({}); //Сохранить значение поста\n  const [fetchPostId, isPostIdLoading, postIdError] = useFetching(async () => {\n    const responce = await PostService.getById(params.id);\n    setPost(responce.data);\n  });\n  useEffect(() => {\n    fetchPostId();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isPostIdLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 97\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u043E\\u0441\\u0442\\u0430: \", post.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435: \", post.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 23\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(PostIdPage, \"csr7vZRUERWCoBQRqFSuhtP/3ow=\", false, function () {\n  return [useParams, useFetching];\n});\n_c = PostIdPage;\nexport default PostIdPage;\nvar _c;\n$RefreshReg$(_c, \"PostIdPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useFetching","PostService","Loader","jsxDEV","_jsxDEV","PostIdPage","_s","params","post","setPost","fetchPostId","isPostIdLoading","postIdError","responce","getById","id","data","children","style","display","justifyContent","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","title","body","_c","$RefreshReg$"],"sources":["/Users/falkinroman/Desktop/my-app/src/Pages/PostIdPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useFetching } from '../hook/useFetching';\nimport PostService from '../API/PostService';\nimport Loader from '../components/UI/loader/Loader';\n\nconst PostIdPage = () => {\n    const params = useParams()  //хук позволяет закрать с url параметр (номер поста)\n    const [post, setPost] = useState({}); //Сохранить значение поста\n    const [fetchPostId, isPostIdLoading, postIdError] = useFetching(async () => {\n        const responce = await PostService.getById(params.id)\n        setPost(responce.data)\n    })\n\n    useEffect(() => {\n        fetchPostId()\n    }, [])\n\n    return (\n        <div>\n            {isPostIdLoading\n                    ? <div style={{ display: 'flex', justifyContent: 'center', marginTop: 30 }}><Loader /></div>\n                    : <div>\n                        <h2>Название поста: {post.title}</h2>\n                        <p>Описание: {post.body}</p>\n                    </div>\n            }\n        </div>\n\n    );\n};\n\nexport default PostIdPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,MAAM,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,MAAM,GAAGR,SAAS,CAAC,CAAC,EAAE;EAC5B,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACY,WAAW,EAAEC,eAAe,EAAEC,WAAW,CAAC,GAAGZ,WAAW,CAAC,YAAY;IACxE,MAAMa,QAAQ,GAAG,MAAMZ,WAAW,CAACa,OAAO,CAACP,MAAM,CAACQ,EAAE,CAAC;IACrDN,OAAO,CAACI,QAAQ,CAACG,IAAI,CAAC;EAC1B,CAAC,CAAC;EAEFnB,SAAS,CAAC,MAAM;IACZa,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIN,OAAA;IAAAa,QAAA,EACKN,eAAe,gBACNP,OAAA;MAAKc,KAAK,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAG,CAAE;MAAAJ,QAAA,eAACb,OAAA,CAACF,MAAM;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAC1FrB,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,GAAI,mFAAgB,EAACT,IAAI,CAACkB,KAAK;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrCrB,OAAA;QAAAa,QAAA,GAAG,oDAAU,EAACT,IAAI,CAACmB,IAAI;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEb,CAAC;AAGd,CAAC;AAACnB,EAAA,CAxBID,UAAU;EAAA,QACGN,SAAS,EAE4BC,WAAW;AAAA;AAAA4B,EAAA,GAH7DvB,UAAU;AA0BhB,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}